//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//
// The supplied json has fields with names that are not valid in apex
// and so can only be parsed with explicitly generated code, this option
// was auto selected for you.

public class JSON2NewUrl {

    public class Link_permissions {
        public Resolved_visibility resolved_visibility {get;set;}
        public Resolved_visibility requested_visibility {get;set;}
        public Boolean can_revoke {get;set;}
        public List<Visibility_policies> visibility_policies {get;set;}
        public Boolean can_set_expiry {get;set;}
        public Boolean can_remove_expiry {get;set;}
        public Boolean allow_download {get;set;}
        public Boolean can_allow_download {get;set;}
        public Boolean can_disallow_download {get;set;}
        public Boolean allow_comments {get;set;}
        public Boolean team_restricts_comments {get;set;}
        public List<Audience_options> audience_options {get;set;}

        public Link_permissions(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (text == 'resolved_visibility') {
                            resolved_visibility = new Resolved_visibility(parser);
                        } else if (text == 'requested_visibility') {
                            requested_visibility = new Resolved_visibility(parser);
                        } else if (text == 'can_revoke') {
                            can_revoke = parser.getBooleanValue();
                        } else if (text == 'visibility_policies') {
                            visibility_policies = arrayOfVisibility_policies(parser);
                        } else if (text == 'can_set_expiry') {
                            can_set_expiry = parser.getBooleanValue();
                        } else if (text == 'can_remove_expiry') {
                            can_remove_expiry = parser.getBooleanValue();
                        } else if (text == 'allow_download') {
                            allow_download = parser.getBooleanValue();
                        } else if (text == 'can_allow_download') {
                            can_allow_download = parser.getBooleanValue();
                        } else if (text == 'can_disallow_download') {
                            can_disallow_download = parser.getBooleanValue();
                        } else if (text == 'allow_comments') {
                            allow_comments = parser.getBooleanValue();
                        } else if (text == 'team_restricts_comments') {
                            team_restricts_comments = parser.getBooleanValue();
                        } else if (text == 'audience_options') {
                            audience_options = arrayOfAudience_options(parser);
                        } else {
                            System.debug(LoggingLevel.WARN, 'Link_permissions consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }

    public String x_tag {get;set;} // in json: .tag
    public String url {get;set;}
    public String id {get;set;}
    public String name {get;set;}
    public String path_lower {get;set;}
    public Link_permissions link_permissions {get;set;}
    public String preview_type {get;set;}
    public String client_modified {get;set;}
    public String server_modified {get;set;}
    public String rev {get;set;}
    public Integer size {get;set;}

    public JSON2NewUrl(JSONParser parser) {
        while (parser.nextToken() != System.JSONToken.END_OBJECT) {
            if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                String text = parser.getText();
                if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                    if (text == '.tag') {
                        x_tag = parser.getText();
                    } else if (text == 'url') {
                        url = parser.getText();
                    } else if (text == 'id') {
                        id = parser.getText();
                    } else if (text == 'name') {
                        name = parser.getText();
                    } else if (text == 'path_lower') {
                        path_lower = parser.getText();
                    } else if (text == 'link_permissions') {
                        link_permissions = new Link_permissions(parser);
                    } else if (text == 'preview_type') {
                        preview_type = parser.getText();
                    } else if (text == 'client_modified') {
                        client_modified = parser.getText();
                    } else if (text == 'server_modified') {
                        server_modified = parser.getText();
                    } else if (text == 'rev') {
                        rev = parser.getText();
                    } else if (text == 'size') {
                        size = parser.getIntegerValue();
                    } else {
                        System.debug(LoggingLevel.WARN, 'JSON2Apex consuming unrecognized property: '+text);
                        consumeObject(parser);
                    }
                }
            }
        }
    }

    public class Visibility_policies {
        public Resolved_visibility policy {get;set;}
        public Resolved_visibility resolved_policy {get;set;}
        public Boolean allowed {get;set;}
        public Resolved_visibility disallowed_reason {get;set;}

        public Visibility_policies(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (text == 'policy') {
                            policy = new Resolved_visibility(parser);
                        } else if (text == 'resolved_policy') {
                            resolved_policy = new Resolved_visibility(parser);
                        } else if (text == 'allowed') {
                            allowed = parser.getBooleanValue();
                        } else if (text == 'disallowed_reason') {
                            disallowed_reason = new Resolved_visibility(parser);
                        } else {
                            System.debug(LoggingLevel.WARN, 'Visibility_policies consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }

    public class Audience_options {
        public Resolved_visibility audience {get;set;}
        public Boolean allowed {get;set;}
        public Resolved_visibility disallowed_reason {get;set;}

        public Audience_options(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (text == 'audience') {
                            audience = new Resolved_visibility(parser);
                        } else if (text == 'allowed') {
                            allowed = parser.getBooleanValue();
                        } else if (text == 'disallowed_reason') {
                            disallowed_reason = new Resolved_visibility(parser);
                        } else {
                            System.debug(LoggingLevel.WARN, 'Audience_options consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }

    public class Resolved_visibility {
        public String x_tag {get;set;} // in json: .tag

        public Resolved_visibility(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (text == '.tag') {
                            x_tag = parser.getText();
                        } else {
                            System.debug(LoggingLevel.WARN, 'Resolved_visibility consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }


    public static JSON2NewUrl parse(String json) {
        System.JSONParser parser = System.JSON.createParser(json);
        return new JSON2NewUrl(parser);
    }

    public static void consumeObject(System.JSONParser parser) {
        Integer depth = 0;
        do {
            System.JSONToken curr = parser.getCurrentToken();
            if (curr == System.JSONToken.START_OBJECT ||
                    curr == System.JSONToken.START_ARRAY) {
                depth++;
            } else if (curr == System.JSONToken.END_OBJECT ||
                    curr == System.JSONToken.END_ARRAY) {
                depth--;
            }
        } while (depth > 0 && parser.nextToken() != null);
    }







    private static List<Visibility_policies> arrayOfVisibility_policies(System.JSONParser p) {
        List<Visibility_policies> res = new List<Visibility_policies>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Visibility_policies(p));
        }
        return res;
    }







    private static List<Audience_options> arrayOfAudience_options(System.JSONParser p) {
        List<Audience_options> res = new List<Audience_options>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Audience_options(p));
        }
        return res;
    }



}