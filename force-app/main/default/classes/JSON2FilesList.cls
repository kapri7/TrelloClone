//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//
// The supplied json has fields with names that are not valid in apex
// and so can only be parsed with explicitly generated code, this option
// was auto selected for you.

public class JSON2FilesList {

    public List<Entries> entries {get;set;}
    public String cursor {get;set;}
    public Boolean has_more {get;set;}

    public JSON2FilesList(JSONParser parser) {
        while (parser.nextToken() != System.JSONToken.END_OBJECT) {
            if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                String text = parser.getText();
                if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                    if (text == 'entries') {
                        entries = arrayOfEntries(parser);
                    } else if (text == 'cursor') {
                        cursor = parser.getText();
                    } else if (text == 'has_more') {
                        has_more = parser.getBooleanValue();
                    } else {
                        System.debug(LoggingLevel.WARN, 'JSON2Apex consuming unrecognized property: '+text);
                        consumeObject(parser);
                    }
                }
            }
        }
    }

    public class Entries {
        public String x_tag {get;set;} // in json: .tag
        public String name {get;set;}
        public String path_lower {get;set;}
        public String path_display {get;set;}
        public String id {get;set;}
        public String client_modified {get;set;}
        public String server_modified {get;set;}
        public String rev {get;set;}
        public Integer size {get;set;}
        public Boolean is_downloadable {get;set;}
        public String content_hash {get;set;}

        public Entries(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (text == '.tag') {
                            x_tag = parser.getText();
                        } else if (text == 'name') {
                            name = parser.getText();
                        } else if (text == 'path_lower') {
                            path_lower = parser.getText();
                        } else if (text == 'path_display') {
                            path_display = parser.getText();
                        } else if (text == 'id') {
                            id = parser.getText();
                        } else if (text == 'client_modified') {
                            client_modified = parser.getText();
                        } else if (text == 'server_modified') {
                            server_modified = parser.getText();
                        } else if (text == 'rev') {
                            rev = parser.getText();
                        } else if (text == 'size') {
                            size = parser.getIntegerValue();
                        } else if (text == 'is_downloadable') {
                            is_downloadable = parser.getBooleanValue();
                        } else if (text == 'content_hash') {
                            content_hash = parser.getText();
                        } else {
                            System.debug(LoggingLevel.WARN, 'Entries consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }


    public static JSON2FilesList parse(String json) {
        System.JSONParser parser = System.JSON.createParser(json);
        return new JSON2FilesList(parser);
    }

    public static void consumeObject(System.JSONParser parser) {
        Integer depth = 0;
        do {
            System.JSONToken curr = parser.getCurrentToken();
            if (curr == System.JSONToken.START_OBJECT ||
                    curr == System.JSONToken.START_ARRAY) {
                depth++;
            } else if (curr == System.JSONToken.END_OBJECT ||
                    curr == System.JSONToken.END_ARRAY) {
                depth--;
            }
        } while (depth > 0 && parser.nextToken() != null);
    }

    private static List<Entries> arrayOfEntries(System.JSONParser p) {
        List<Entries> res = new List<Entries>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Entries(p));
        }
        return res;
    }
}